{%@@ if 'mbp' in profile @@%}
" import (copied) files from vim80 on osx
source ~/.vimrc-osx-defaults
{%@@ endif @@%}

" Setting up Vundle - the vim plugin bundler
let iCanHazVundle=1
let vundle_readme=expand('~/.vim/bundle/vundle/README.md')
if !filereadable(vundle_readme) 
     echo "Installing Vundle.."
     echo ""
     silent !mkdir -p ~/.vim/bundle
     silent !git clone https://github.com/VundleVim/Vundle.vim ~/.vim/bundle/vundle
     let iCanHazVundle=0
endif
set nocompatible              " be iMproved, required
filetype off                  " required
set rtp+=~/.vim/bundle/vundle/
call vundle#begin()
Plugin 'VundleVim/Vundle.vim'
"Add your bundles here
Plugin 'Syntastic' "uber awesome syntax and errors highlighter
Plugin 'https://github.com/tpope/vim-fugitive' "So awesome, it should be illegal 
Plugin 'airblade/vim-gitgutter'
Plugin 'vim-scripts/indentpython.vim'       " python indent
Plugin 'godlygeek/tabular'			" required for vim-markdown
Plugin 'plasticboy/vim-markdown'		" md plugin
Plugin 'vimwiki/vimwiki'
Plugin 'scrooloose/nerdtree'
Plugin 'Xuyuanp/nerdtree-git-plugin'
Plugin 'benmills/vimux'
Plugin 'Valloric/YouCompleteMe'             " python autocomplete
Plugin 'saltstack/salt-vim'
Plugin 'wombat256.vim'
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'Raimondi/delimitMate'
Plugin 'christoomey/vim-tmux-navigator'

if iCanHazVundle == 0
    echo "Installing Vundles, please ignore key map error messages"
    echo ""
    :PluginInstall
endif

call vundle#end() 
"must be last
filetype plugin indent on " load filetype plugins/indent settings

set mouse=a
set t_Co=256
colorscheme wombat256mod
syntax on                      " enable syntax

:let mapleader = " "

"airline
set laststatus=2 "force to appear

" gitgutter
set updatetime=250

" set incr search
set incsearch

" disable .swp
set noswapfile

set cursorline
set cursorcolumn
set number

set tabstop=4 shiftwidth=4 expandtab

" executes script
:map <F6> :w<CR>:silent !chmod +x %:p<CR>:silent !%:p 2>&1 \| tee /tmp/%:t.tmp<CR>:pedit! +:42343234 /tmp/%:t.tmp<CR>:redraw!<CR><CR>n

" execute current file
nnoremap <F9> :!%:p
" nnoremap <leader>r :!%:p

set encoding=utf-8

" yaml
autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab

" YouCompleteMe
" debug youcompleteme
" let g:ycm_keep_logfiles = 1
" let g:ycm_log_level = 'debug'
map <leader>g  :YcmCompleter GoToDefinitionElseDeclaration<CR>
let g:ycm_autoclose_preview_window_after_completion = 1
let g:ycm_autoclose_preview_window_after_insertion = 1
let g:ycm_key_list_select_completion = ['<TAB>', '<DOWN>']
let g:ycm_key_list_previous_completion = ['<S-TAB>', '<UP>']
let g:ycm_key_list_stop_completion = ['<C-y>', '<ENTER>']

" :python << EOF
" import os
" virtualenv = os.environ.get('VIRTUAL_ENV')
" if virtualenv:
"   activate_this = os.path.join(virtualenv, 'bin', 'activate_this.py')
"   if os.path.exists(activate_this):
"     execfile(activate_this, dict(__file__=activate_this))
" EOF

" Activate virtualenv if found in os env variable
:python3 <<EOF
import os
virtualenv = os.environ.get('VIRTUAL_ENV')
if virtualenv:
  activate_this = os.path.join(virtualenv, 'bin', 'activate_this.py')
  if os.path.exists(activate_this):
    exec(compile(open(activate_this).read(), activate_this, 'exec'), {'__file__': activate_this})
EOF

" indent several lines in visual mode 
xnoremap <Tab> >gv
xnoremap <S-Tab> <gv

" md fold level
set foldlevel=5

" list and select buffers
:nnoremap <F5> :buffers<CR>:buffer<Space>

" vimwiki options
let mywiki = {}
let mywiki.path = '~/gitrepos/mywiki'
let mywiki.path_htlm = '~/gitrepos/mywiki_html'
let g:vimwiki_list = [mywiki]

let g:vimwiki_autowriteall = 1

" nerdtree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif " close vim if only nerdtree 
map <Leader>n :NERDTreeToggle<CR>
" let NERDTreeMapOpenInTab='<ENTER>'

" .py header
au BufNewFile *.py 0r ~/gitrepos/misc/scripts/vim_python_header.txt

" vimux
map <Leader>vp :call VimuxPromptCommand("if [[ -z \"$VIRTUAL_ENV\" ]]; then thispy=python3; else thispy=\"$VIRTUAL_ENV/bin/python\"; fi ; $thispy " . bufname("%"))<CR>
map <Leader>vv :VimuxPromptCommand<CR>
" Run last command executed by VimuxRunCommand
map <Leader>vl :VimuxRunLastCommand<CR>
" Zoom the tmux runner pane
map <Leader>vz :VimuxZoomRunner<CR>
let g:VimuxUseNearest = 0

" powerline
python3 from powerline.vim import setup as powerline_setup
python3 powerline_setup()
python3 del powerline_setup

" ctrlP
let g:ctrlp_show_hidden = 1

augroup CursorLineOnlyInActiveWindow
  autocmd!
  autocmd VimEnter,WinEnter,BufWinEnter * setlocal cursorline
  autocmd VimEnter,WinEnter,BufWinEnter * setlocal cursorcolumn
  autocmd WinLeave * setlocal nocursorline
  autocmd WinLeave * setlocal nocursorcolumn
augroup END

" tmux vim navigator
let g:tmux_navigator_no_mappings = 1
nnoremap <silent> <c-h> :TmuxNavigateLeft<cr>
nnoremap <silent> <c-j> :TmuxNavigateDown<cr>
nnoremap <silent> <c-k> :TmuxNavigateUp<cr>
nnoremap <silent> <c-l> :TmuxNavigateRight<cr>
nnoremap <silent> <c-\> :TmuxNavigatePrevious<cr>

" be verbose about tabs, spaces, eol
" set listchars=eol:⏎,tab:▶·,trail:.,nbsp:.,extends:\#
